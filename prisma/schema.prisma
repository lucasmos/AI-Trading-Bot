generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id             String         @id @default(cuid())
  email          String?        @unique
  name           String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  googleId       String?        @unique
  picture        String?
  authMethod     String?
  displayName    String?
  avatarDataUrl  String?
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  derivAccountId String?        @unique // This is the Deriv main login ID, might be CR... or VRTC...
  provider       String?
  accounts       Account[]
  apiKeys        ApiKey[]
  notifications  Notification[]
  alerts         PriceAlert[]
  profitSummary  ProfitSummary?
  savedItems     SavedItem[]
  sessions       Session[]
  trades         Trade[]
  usageStats     UsageStats[]
  settings       UserSettings?
  watchlists     Watchlist[]
}

model UserSettings {
  id                        String    @id @default(uuid())
  userId                    String    @unique
  user                      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  theme                     String    @default("light")
  language                  String    @default("en")
  notifications             Boolean   @default(true)
  settings                  Json      // For other dynamic user-specific settings

  // Deriv-specific settings
  derivDemoAccountId        String?   // e.g., "VRTC..."
  derivRealAccountId        String?   // e.g., "CR..."
  selectedDerivAccountType  String?   @default("demo") // "demo" or "real"
  derivDemoBalance          Float?
  derivRealBalance          Float?
  lastBalanceSync           DateTime? // Timestamp of the last successful balance update

  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
}

model UsageStats {
  id        String   @id @default(uuid())
  userId    String
  action    String
  timestamp DateTime @default(now())
  metadata  Json?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([timestamp])
}

model SavedItem {
  id        String   @id @default(uuid())
  userId    String
  title     String
  content   String
  url       String?
  tags      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([tags])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  title     String
  message   String
  type      String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([read])
}

model Trade {
  id           String    @id @default(uuid())
  userId       String
  symbol       String
  type         String
  amount       Float
  price        Float
  totalValue   Float
  status       String
  openTime     DateTime  @default(now())
  closeTime    DateTime?
  profit       Float?
  metadata     Json?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  exchange     String?
  fees         Float?
  leverage     Float?
  orderType    String?
  stopLoss     Float?
  takeProfit   Float?
  aiStrategyId String?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([symbol])
  @@index([status])
  @@index([openTime])
}

model ProfitSummary {
  id            String   @id @default(uuid())
  userId        String   @unique
  totalProfit   Float    @default(0)
  totalTrades   Int      @default(0)
  winningTrades Int      @default(0)
  losingTrades  Int      @default(0)
  winRate       Float    @default(0)
  lastUpdated   DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Watchlist {
  id        String   @id @default(uuid())
  userId    String
  name      String
  symbols   String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([symbols])
}

model PriceAlert {
  id        String   @id @default(uuid())
  userId    String
  symbol    String
  price     Float
  condition String
  triggered Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([symbol])
  @@index([triggered])
}

model ApiKey {
  id         String   @id @default(uuid())
  userId     String
  exchange   String
  apiKey     String
  secretKey  String
  passphrase String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([exchange])
}

model ExtensionLog {
  id        String   @id @default(uuid())
  level     String
  message   String
  metadata  Json?
  timestamp DateTime @default(now())

  @@index([level])
  @@index([timestamp])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  email     String
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([token])
}
